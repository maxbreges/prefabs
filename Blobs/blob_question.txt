I'm trying to extract a MIDI chord played using the following code: 

void onMidi2Message(const midi::message_view& msg)
 {
     const auto header = gmpi::midi_2_0::decodeHeader(msg);
     int chan = static_cast<uint8_t>(msg[1] & 0x0f); // Extract the channel number (0–15)

     if (chan >= 0 && chan < 16) // Validate channel range against MIDI's full range
     {
         const auto note = gmpi::midi_2_0::decodeNote(msg);
         int noteNumber = (int)(uint8_t)note.noteNumber; // Get the MIDI number of the note

         switch (header.status)
         {
         case gmpi::midi_2_0::NoteOn:
             activeNotes[noteNumber] = true; // Mark the note as active
             break;
         case gmpi::midi_2_0::NoteOff:
             activeNotes[noteNumber] = false; // Mark the note as inactive
             break;
         default:
             return; // Skip other message types
         }

         std::vector<int> frets;
         std::vector<int> strings;

         // Collect active notes and their corresponding channels
         for (int i = 0; i < MAX_NOTES; ++i) {
             if (activeNotes[i]) {
                 frets.push_back(i);           // Collect the note number (frets)
                 strings.push_back(chan + 1); // Use (chan + 1) if you want 1-indexed channel output
             }
         }

         if (!frets.empty()) {
             pinX.setValueRaw(frets.size() * sizeof(int), frets.data());
             pinX.sendPinUpdate(0); // Send frets to GUI               
             pinY.setValueRaw(strings.size() * sizeof(int), strings.data());
             pinY.sendPinUpdate(0); // Send strings to GUI             
         }
     }
 }


However, while the pinY is supposed to output "04 00 00 00 03 00 00 00 02 00 00 00 01 00 00 00", it outputs "02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00" instead.

If I modify the code to use switches I do seem to have channels on separate outputs:

    void onMidi2Message(const midi::message_view& msg)
{
    const auto header = gmpi::midi_2_0::decodeHeader(msg);
    int chan = static_cast<uint8_t>(msg[1] & 0x0f); // Extract the channel number (0–15)

    // Ensure we only handle channels we care about (1 to 4)
    if (chan >= 0 && chan < 7) // Only handle channel 1 to 4 (0-3)
    {
        const auto note = gmpi::midi_2_0::decodeNote(msg);
        int noteNumber = static_cast<uint8_t>(note.noteNumber); // Get the MIDI note number

        switch (header.status)
        {
            case gmpi::midi_2_0::NoteOn:
                activeNotes[noteNumber] = true; // Mark the note as active
                break;
            case gmpi::midi_2_0::NoteOff:
                activeNotes[noteNumber] = false; // Mark the note as inactive
                break;
            default:
                return; // Skip other message types
        }

        // Find the highest active note for the current channel
        int activeFret = -1; // Initialize as no active fret
        for (int i = 0; i < MAX_NOTES; ++i) {
            if (activeNotes[i]) {
                activeFret = i; // Update active fret
            }
        }

        // If an active fret exists, send it to the appropriate channel output
        if (activeFret >= 0)
        {
            switch (chan)
            {
                case 0: // Channel 1
                    pinY1.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY1.sendPinUpdate(0);
                    break;
                case 1: // Channel 2
                    pinY2.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY2.sendPinUpdate(0);
                    break;
                case 2: // Channel 3
                    pinY3.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY3.sendPinUpdate(0);
                    break;
                case 3: // Channel 4
                    pinY4.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY4.sendPinUpdate(0);
                    break;
                case 4: // Channel 3
                    pinY5.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY5.sendPinUpdate(0);
                    break;
                case 5: // Channel 4
                    pinY6.setValue(activeFret + 0); // Shift by 1 for 1-based output
                    pinY6.sendPinUpdate(0);
                    break;
            }
        }
        else 
        {
            // If no active fret, reset the output (optional)
            switch (chan)
            {
                case 0: pinY1.setValue(0); pinY1.sendPinUpdate(0); break;
                case 1: pinY2.setValue(0); pinY2.sendPinUpdate(0); break;
                case 2: pinY3.setValue(0); pinY3.sendPinUpdate(0); break;
                case 3: pinY4.setValue(0); pinY4.sendPinUpdate(0); break;
                case 4: pinY5.setValue(0); pinY5.sendPinUpdate(0); break;
                case 5: pinY6.setValue(0); pinY6.sendPinUpdate(0); break;
            }
        }
    }
}

Should the blob output behave this way or there's a bug?



